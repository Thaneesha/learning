AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for frontend build pipeline

Parameters:
  ProjectName:
    Type: String
  GitHubOAuthToken:
    Type: String
  RepoName:
    Type: String
  ArtifactBucket:
    Type: String
  Role:
    Type: String
  Env:
    Type: String
  CloudFormTemplatePath:
    Type: String
  Branch:
    Type: String

Conditions:
  CreateBuildResources: !Equals [ !Ref Env, dev ]
  NoBuildResources: !Not [!Equals [ !Ref Env, dev ]]

###############################################################################
# Resources
###############################################################################
Resources:
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Env}-cfn
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument: {
          "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject"
                        ],
                        "Resource": [
                          !Sub "arn:aws:s3:::${ArtifactBucket}",
                          !Sub "arn:aws:s3:::${ArtifactBucket}/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cloudfront:*"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "route53:ListResourceRecordSets",
                          "route53:ListHostedZonesByName",
                          "route53:ListHostedZones",
                          "route53:GetHostedZone",
                          "route53:ChangeResourceRecordSets",
                          "route53:GetChange"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          !Sub "arn:aws:s3:::${DomainPrefix}${Env}.${Domain}",
                          !Sub "arn:aws:s3:::${DomainPrefix}${Env}.${Domain}/*"
                        ]
                      }
                      ]
                    }
  BuildConfig:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-codebuild-${BuildStep}
      ServiceRole: !Ref Role
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImageType 
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: PROJECT_NAME
          Value: !Ref ProjectName
        - Name: REPO_NAME
          Value: !Ref RepoName
        - Name: ENV
          Value: !Ref Env
      Source:
        BuildSpec: !Ref BuildSpecFile
        Type: CODEPIPELINE
  ##########################################################
  # Pipeline Configuration
  ##########################################################
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ProjectName}-${Env}
      RoleArn: !Ref Role
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

      ##########################################################
      # Source Stage
      ##########################################################
      - Name: Source
        Actions:

        # CODE SOURCE
        - Name: Source
          InputArtifacts: []
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: source-output
          Configuration:
            Owner: cloudezrx
            Repo: !Ref RepoName
            Branch: !Ref Branch
            OAuthToken: !Ref GitHubOAuthToken
          RunOrder: 1


      ##########################################################
      # Build Stage
      ##########################################################
      - Name: Build
        Actions:

        ##### BUILD STEP #####
        - !If
          - CreateBuildResources
          - Name: Build
            InputArtifacts:
            - Name: source-output
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            OutputArtifacts:
            - Name: build-out
            Configuration:
              ProjectName: !GetAtt Build.Outputs.BuildConfig
            RunOrder: 1
          - !Ref AWS::NoValue

      ##########################################################
      # Deployment Stage
      ##########################################################
      - Name: Deploy
        Actions:

        # Cloudform the deployment
        - Name: GenerateDeployment
          InputArtifacts:
          - Name: build-out
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            ChangeSetName: Deploy
            ActionMode: CREATE_UPDATE
            StackName: !Sub "codepipeline-deployment-${Env}"
            Capabilities: CAPABILITY_NAMED_IAM
            TemplatePath: build-out::ec2.json
            RoleArn: !GetAtt CFNRole.Outputs.Role
          RunOrder: 1

